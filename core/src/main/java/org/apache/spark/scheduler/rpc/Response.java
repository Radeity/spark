/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.spark.scheduler.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.2)", date = "2023-12-23")
public class Response implements org.apache.thrift.TBase<Response, Response._Fields>, java.io.Serializable, Cloneable, Comparable<Response> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response");

  private static final org.apache.thrift.protocol.TField RES_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("resCode", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LPMAX_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("LPMaxTime", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxTime", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField OPTIMAL_DECISION_FIELD_DESC = new org.apache.thrift.protocol.TField("optimalDecision", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResponseTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable RESCODE resCode; // required
  public double LPMaxTime; // required
  public double maxTime; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Boolean>> optimalDecision; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RES_CODE((short)1, "resCode"),
    LPMAX_TIME((short)2, "LPMaxTime"),
    MAX_TIME((short)3, "maxTime"),
    OPTIMAL_DECISION((short)4, "optimalDecision");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RES_CODE
          return RES_CODE;
        case 2: // LPMAX_TIME
          return LPMAX_TIME;
        case 3: // MAX_TIME
          return MAX_TIME;
        case 4: // OPTIMAL_DECISION
          return OPTIMAL_DECISION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LPMAXTIME_ISSET_ID = 0;
  private static final int __MAXTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RES_CODE, new org.apache.thrift.meta_data.FieldMetaData("resCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "RESCODE")));
    tmpMap.put(_Fields.LPMAX_TIME, new org.apache.thrift.meta_data.FieldMetaData("LPMaxTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_TIME, new org.apache.thrift.meta_data.FieldMetaData("maxTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPTIMAL_DECISION, new org.apache.thrift.meta_data.FieldMetaData("optimalDecision", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response.class, metaDataMap);
  }

  public Response() {
  }

  public Response(
    RESCODE resCode,
    double LPMaxTime,
    double maxTime,
    java.util.List<java.util.List<java.lang.Boolean>> optimalDecision)
  {
    this();
    this.resCode = resCode;
    this.LPMaxTime = LPMaxTime;
    setLPMaxTimeIsSet(true);
    this.maxTime = maxTime;
    setMaxTimeIsSet(true);
    this.optimalDecision = optimalDecision;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Response(Response other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetResCode()) {
      this.resCode = other.resCode;
    }
    this.LPMaxTime = other.LPMaxTime;
    this.maxTime = other.maxTime;
    if (other.isSetOptimalDecision()) {
      java.util.List<java.util.List<java.lang.Boolean>> __this__optimalDecision = new java.util.ArrayList<java.util.List<java.lang.Boolean>>(other.optimalDecision.size());
      for (java.util.List<java.lang.Boolean> other_element : other.optimalDecision) {
        java.util.List<java.lang.Boolean> __this__optimalDecision_copy = new java.util.ArrayList<java.lang.Boolean>(other_element);
        __this__optimalDecision.add(__this__optimalDecision_copy);
      }
      this.optimalDecision = __this__optimalDecision;
    }
  }

  public Response deepCopy() {
    return new Response(this);
  }

  @Override
  public void clear() {
    this.resCode = null;
    setLPMaxTimeIsSet(false);
    this.LPMaxTime = 0.0;
    setMaxTimeIsSet(false);
    this.maxTime = 0.0;
    this.optimalDecision = null;
  }

  @org.apache.thrift.annotation.Nullable
  public RESCODE getResCode() {
    return this.resCode;
  }

  public Response setResCode(@org.apache.thrift.annotation.Nullable RESCODE resCode) {
    this.resCode = resCode;
    return this;
  }

  public void unsetResCode() {
    this.resCode = null;
  }

  /** Returns true if field resCode is set (has been assigned a value) and false otherwise */
  public boolean isSetResCode() {
    return this.resCode != null;
  }

  public void setResCodeIsSet(boolean value) {
    if (!value) {
      this.resCode = null;
    }
  }

  public double getLPMaxTime() {
    return this.LPMaxTime;
  }

  public Response setLPMaxTime(double LPMaxTime) {
    this.LPMaxTime = LPMaxTime;
    setLPMaxTimeIsSet(true);
    return this;
  }

  public void unsetLPMaxTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LPMAXTIME_ISSET_ID);
  }

  /** Returns true if field LPMaxTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLPMaxTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LPMAXTIME_ISSET_ID);
  }

  public void setLPMaxTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LPMAXTIME_ISSET_ID, value);
  }

  public double getMaxTime() {
    return this.maxTime;
  }

  public Response setMaxTime(double maxTime) {
    this.maxTime = maxTime;
    setMaxTimeIsSet(true);
    return this;
  }

  public void unsetMaxTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXTIME_ISSET_ID);
  }

  /** Returns true if field maxTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXTIME_ISSET_ID);
  }

  public void setMaxTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXTIME_ISSET_ID, value);
  }

  public int getOptimalDecisionSize() {
    return (this.optimalDecision == null) ? 0 : this.optimalDecision.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.Boolean>> getOptimalDecisionIterator() {
    return (this.optimalDecision == null) ? null : this.optimalDecision.iterator();
  }

  public void addToOptimalDecision(java.util.List<java.lang.Boolean> elem) {
    if (this.optimalDecision == null) {
      this.optimalDecision = new java.util.ArrayList<java.util.List<java.lang.Boolean>>();
    }
    this.optimalDecision.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.Boolean>> getOptimalDecision() {
    return this.optimalDecision;
  }

  public Response setOptimalDecision(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Boolean>> optimalDecision) {
    this.optimalDecision = optimalDecision;
    return this;
  }

  public void unsetOptimalDecision() {
    this.optimalDecision = null;
  }

  /** Returns true if field optimalDecision is set (has been assigned a value) and false otherwise */
  public boolean isSetOptimalDecision() {
    return this.optimalDecision != null;
  }

  public void setOptimalDecisionIsSet(boolean value) {
    if (!value) {
      this.optimalDecision = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case RES_CODE:
      if (value == null) {
        unsetResCode();
      } else {
        setResCode((RESCODE)value);
      }
      break;

    case LPMAX_TIME:
      if (value == null) {
        unsetLPMaxTime();
      } else {
        setLPMaxTime((java.lang.Double)value);
      }
      break;

    case MAX_TIME:
      if (value == null) {
        unsetMaxTime();
      } else {
        setMaxTime((java.lang.Double)value);
      }
      break;

    case OPTIMAL_DECISION:
      if (value == null) {
        unsetOptimalDecision();
      } else {
        setOptimalDecision((java.util.List<java.util.List<java.lang.Boolean>>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RES_CODE:
      return getResCode();

    case LPMAX_TIME:
      return getLPMaxTime();

    case MAX_TIME:
      return getMaxTime();

    case OPTIMAL_DECISION:
      return getOptimalDecision();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RES_CODE:
      return isSetResCode();
    case LPMAX_TIME:
      return isSetLPMaxTime();
    case MAX_TIME:
      return isSetMaxTime();
    case OPTIMAL_DECISION:
      return isSetOptimalDecision();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Response)
      return this.equals((Response)that);
    return false;
  }

  public boolean equals(Response that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_resCode = true && this.isSetResCode();
    boolean that_present_resCode = true && that.isSetResCode();
    if (this_present_resCode || that_present_resCode) {
      if (!(this_present_resCode && that_present_resCode))
        return false;
      if (!this.resCode.equals(that.resCode))
        return false;
    }

    boolean this_present_LPMaxTime = true;
    boolean that_present_LPMaxTime = true;
    if (this_present_LPMaxTime || that_present_LPMaxTime) {
      if (!(this_present_LPMaxTime && that_present_LPMaxTime))
        return false;
      if (this.LPMaxTime != that.LPMaxTime)
        return false;
    }

    boolean this_present_maxTime = true;
    boolean that_present_maxTime = true;
    if (this_present_maxTime || that_present_maxTime) {
      if (!(this_present_maxTime && that_present_maxTime))
        return false;
      if (this.maxTime != that.maxTime)
        return false;
    }

    boolean this_present_optimalDecision = true && this.isSetOptimalDecision();
    boolean that_present_optimalDecision = true && that.isSetOptimalDecision();
    if (this_present_optimalDecision || that_present_optimalDecision) {
      if (!(this_present_optimalDecision && that_present_optimalDecision))
        return false;
      if (!this.optimalDecision.equals(that.optimalDecision))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetResCode()) ? 131071 : 524287);
    if (isSetResCode())
      hashCode = hashCode * 8191 + resCode.getValue();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(LPMaxTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(maxTime);

    hashCode = hashCode * 8191 + ((isSetOptimalDecision()) ? 131071 : 524287);
    if (isSetOptimalDecision())
      hashCode = hashCode * 8191 + optimalDecision.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Response other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetResCode(), other.isSetResCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resCode, other.resCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLPMaxTime(), other.isSetLPMaxTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLPMaxTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LPMaxTime, other.LPMaxTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxTime(), other.isSetMaxTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxTime, other.maxTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOptimalDecision(), other.isSetOptimalDecision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptimalDecision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optimalDecision, other.optimalDecision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Response(");
    boolean first = true;

    sb.append("resCode:");
    if (this.resCode == null) {
      sb.append("null");
    } else {
      sb.append(this.resCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("LPMaxTime:");
    sb.append(this.LPMaxTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxTime:");
    sb.append(this.maxTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("optimalDecision:");
    if (this.optimalDecision == null) {
      sb.append("null");
    } else {
      sb.append(this.optimalDecision);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (resCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'resCode' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'LPMaxTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'maxTime' because it's a primitive and you chose the non-beans generator.
    if (optimalDecision == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'optimalDecision' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResponseStandardScheme getScheme() {
      return new ResponseStandardScheme();
    }
  }

  private static class ResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Response struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RES_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resCode = org.apache.spark.scheduler.rpc.RESCODE.findByValue(iprot.readI32());
              struct.setResCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LPMAX_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.LPMaxTime = iprot.readDouble();
              struct.setLPMaxTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.maxTime = iprot.readDouble();
              struct.setMaxTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPTIMAL_DECISION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.optimalDecision = new java.util.ArrayList<java.util.List<java.lang.Boolean>>(_list56.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> _elem57;
                for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                {
                  {
                    org.apache.thrift.protocol.TList _list59 = iprot.readListBegin();
                    _elem57 = new java.util.ArrayList<java.lang.Boolean>(_list59.size);
                    boolean _elem60;
                    for (int _i61 = 0; _i61 < _list59.size; ++_i61)
                    {
                      _elem60 = iprot.readBool();
                      _elem57.add(_elem60);
                    }
                    iprot.readListEnd();
                  }
                  struct.optimalDecision.add(_elem57);
                }
                iprot.readListEnd();
              }
              struct.setOptimalDecisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetLPMaxTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'LPMaxTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMaxTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxTime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Response struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resCode != null) {
        oprot.writeFieldBegin(RES_CODE_FIELD_DESC);
        oprot.writeI32(struct.resCode.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LPMAX_TIME_FIELD_DESC);
      oprot.writeDouble(struct.LPMaxTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_TIME_FIELD_DESC);
      oprot.writeDouble(struct.maxTime);
      oprot.writeFieldEnd();
      if (struct.optimalDecision != null) {
        oprot.writeFieldBegin(OPTIMAL_DECISION_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.optimalDecision.size()));
          for (java.util.List<java.lang.Boolean> _iter62 : struct.optimalDecision)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, _iter62.size()));
              for (boolean _iter63 : _iter62)
              {
                oprot.writeBool(_iter63);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResponseTupleScheme getScheme() {
      return new ResponseTupleScheme();
    }
  }

  private static class ResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Response struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.resCode.getValue());
      oprot.writeDouble(struct.LPMaxTime);
      oprot.writeDouble(struct.maxTime);
      {
        oprot.writeI32(struct.optimalDecision.size());
        for (java.util.List<java.lang.Boolean> _iter64 : struct.optimalDecision)
        {
          {
            oprot.writeI32(_iter64.size());
            for (boolean _iter65 : _iter64)
            {
              oprot.writeBool(_iter65);
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Response struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.resCode = org.apache.spark.scheduler.rpc.RESCODE.findByValue(iprot.readI32());
      struct.setResCodeIsSet(true);
      struct.LPMaxTime = iprot.readDouble();
      struct.setLPMaxTimeIsSet(true);
      struct.maxTime = iprot.readDouble();
      struct.setMaxTimeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list66 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
        struct.optimalDecision = new java.util.ArrayList<java.util.List<java.lang.Boolean>>(_list66.size);
        @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> _elem67;
        for (int _i68 = 0; _i68 < _list66.size; ++_i68)
        {
          {
            org.apache.thrift.protocol.TList _list69 = iprot.readListBegin(org.apache.thrift.protocol.TType.BOOL);
            _elem67 = new java.util.ArrayList<java.lang.Boolean>(_list69.size);
            boolean _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = iprot.readBool();
              _elem67.add(_elem70);
            }
          }
          struct.optimalDecision.add(_elem67);
        }
      }
      struct.setOptimalDecisionIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

