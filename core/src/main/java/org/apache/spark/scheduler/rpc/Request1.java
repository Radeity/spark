/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.spark.scheduler.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.2)", date = "2024-01-17")
public class Request1 implements org.apache.thrift.TBase<Request1, Request1._Fields>, java.io.Serializable, Cloneable, Comparable<Request1> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request1");

  private static final org.apache.thrift.protocol.TField NUM_MAPPERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numMappers", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_REDUCERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numReducers", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_SITES_FIELD_DESC = new org.apache.thrift.protocol.TField("numSites", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField BANDWIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("bandwidth", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField FINISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("finishTime", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField OUTPUT_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("outputSize", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField SITE_LOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("siteLoad", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField ALPHA_FIELD_DESC = new org.apache.thrift.protocol.TField("alpha", org.apache.thrift.protocol.TType.DOUBLE, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request1StandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request1TupleSchemeFactory();

  public int numMappers; // required
  public int numReducers; // required
  public int numSites; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> bandwidth; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> finishTime; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.util.List<java.lang.Long>>> outputSize; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> siteLoad; // optional
  public double alpha; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_MAPPERS((short)1, "numMappers"),
    NUM_REDUCERS((short)2, "numReducers"),
    NUM_SITES((short)3, "numSites"),
    BANDWIDTH((short)4, "bandwidth"),
    FINISH_TIME((short)5, "finishTime"),
    OUTPUT_SIZE((short)6, "outputSize"),
    SITE_LOAD((short)7, "siteLoad"),
    ALPHA((short)8, "alpha");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_MAPPERS
          return NUM_MAPPERS;
        case 2: // NUM_REDUCERS
          return NUM_REDUCERS;
        case 3: // NUM_SITES
          return NUM_SITES;
        case 4: // BANDWIDTH
          return BANDWIDTH;
        case 5: // FINISH_TIME
          return FINISH_TIME;
        case 6: // OUTPUT_SIZE
          return OUTPUT_SIZE;
        case 7: // SITE_LOAD
          return SITE_LOAD;
        case 8: // ALPHA
          return ALPHA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMMAPPERS_ISSET_ID = 0;
  private static final int __NUMREDUCERS_ISSET_ID = 1;
  private static final int __NUMSITES_ISSET_ID = 2;
  private static final int __ALPHA_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BANDWIDTH,_Fields.FINISH_TIME,_Fields.OUTPUT_SIZE,_Fields.SITE_LOAD};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_MAPPERS, new org.apache.thrift.meta_data.FieldMetaData("numMappers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_REDUCERS, new org.apache.thrift.meta_data.FieldMetaData("numReducers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_SITES, new org.apache.thrift.meta_data.FieldMetaData("numSites", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BANDWIDTH, new org.apache.thrift.meta_data.FieldMetaData("bandwidth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    tmpMap.put(_Fields.FINISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("finishTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    tmpMap.put(_Fields.OUTPUT_SIZE, new org.apache.thrift.meta_data.FieldMetaData("outputSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))))));
    tmpMap.put(_Fields.SITE_LOAD, new org.apache.thrift.meta_data.FieldMetaData("siteLoad", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.ALPHA, new org.apache.thrift.meta_data.FieldMetaData("alpha", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request1.class, metaDataMap);
  }

  public Request1() {
  }

  public Request1(
    int numMappers,
    int numReducers,
    int numSites,
    double alpha)
  {
    this();
    this.numMappers = numMappers;
    setNumMappersIsSet(true);
    this.numReducers = numReducers;
    setNumReducersIsSet(true);
    this.numSites = numSites;
    setNumSitesIsSet(true);
    this.alpha = alpha;
    setAlphaIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Request1(Request1 other) {
    __isset_bitfield = other.__isset_bitfield;
    this.numMappers = other.numMappers;
    this.numReducers = other.numReducers;
    this.numSites = other.numSites;
    if (other.isSetBandwidth()) {
      java.util.List<java.util.List<java.lang.Integer>> __this__bandwidth = new java.util.ArrayList<java.util.List<java.lang.Integer>>(other.bandwidth.size());
      for (java.util.List<java.lang.Integer> other_element : other.bandwidth) {
        java.util.List<java.lang.Integer> __this__bandwidth_copy = new java.util.ArrayList<java.lang.Integer>(other_element);
        __this__bandwidth.add(__this__bandwidth_copy);
      }
      this.bandwidth = __this__bandwidth;
    }
    if (other.isSetFinishTime()) {
      java.util.List<java.util.List<java.lang.Integer>> __this__finishTime = new java.util.ArrayList<java.util.List<java.lang.Integer>>(other.finishTime.size());
      for (java.util.List<java.lang.Integer> other_element : other.finishTime) {
        java.util.List<java.lang.Integer> __this__finishTime_copy = new java.util.ArrayList<java.lang.Integer>(other_element);
        __this__finishTime.add(__this__finishTime_copy);
      }
      this.finishTime = __this__finishTime;
    }
    if (other.isSetOutputSize()) {
      java.util.List<java.util.List<java.util.List<java.lang.Long>>> __this__outputSize = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Long>>>(other.outputSize.size());
      for (java.util.List<java.util.List<java.lang.Long>> other_element : other.outputSize) {
        java.util.List<java.util.List<java.lang.Long>> __this__outputSize_copy = new java.util.ArrayList<java.util.List<java.lang.Long>>(other_element.size());
        for (java.util.List<java.lang.Long> other_element_element : other_element) {
          java.util.List<java.lang.Long> __this__outputSize_copy_copy = new java.util.ArrayList<java.lang.Long>(other_element_element);
          __this__outputSize_copy.add(__this__outputSize_copy_copy);
        }
        __this__outputSize.add(__this__outputSize_copy);
      }
      this.outputSize = __this__outputSize;
    }
    if (other.isSetSiteLoad()) {
      java.util.List<java.lang.Double> __this__siteLoad = new java.util.ArrayList<java.lang.Double>(other.siteLoad);
      this.siteLoad = __this__siteLoad;
    }
    this.alpha = other.alpha;
  }

  public Request1 deepCopy() {
    return new Request1(this);
  }

  @Override
  public void clear() {
    setNumMappersIsSet(false);
    this.numMappers = 0;
    setNumReducersIsSet(false);
    this.numReducers = 0;
    setNumSitesIsSet(false);
    this.numSites = 0;
    this.bandwidth = null;
    this.finishTime = null;
    this.outputSize = null;
    this.siteLoad = null;
    setAlphaIsSet(false);
    this.alpha = 0.0;
  }

  public int getNumMappers() {
    return this.numMappers;
  }

  public Request1 setNumMappers(int numMappers) {
    this.numMappers = numMappers;
    setNumMappersIsSet(true);
    return this;
  }

  public void unsetNumMappers() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMMAPPERS_ISSET_ID);
  }

  /** Returns true if field numMappers is set (has been assigned a value) and false otherwise */
  public boolean isSetNumMappers() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMMAPPERS_ISSET_ID);
  }

  public void setNumMappersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMMAPPERS_ISSET_ID, value);
  }

  public int getNumReducers() {
    return this.numReducers;
  }

  public Request1 setNumReducers(int numReducers) {
    this.numReducers = numReducers;
    setNumReducersIsSet(true);
    return this;
  }

  public void unsetNumReducers() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMREDUCERS_ISSET_ID);
  }

  /** Returns true if field numReducers is set (has been assigned a value) and false otherwise */
  public boolean isSetNumReducers() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMREDUCERS_ISSET_ID);
  }

  public void setNumReducersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMREDUCERS_ISSET_ID, value);
  }

  public int getNumSites() {
    return this.numSites;
  }

  public Request1 setNumSites(int numSites) {
    this.numSites = numSites;
    setNumSitesIsSet(true);
    return this;
  }

  public void unsetNumSites() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMSITES_ISSET_ID);
  }

  /** Returns true if field numSites is set (has been assigned a value) and false otherwise */
  public boolean isSetNumSites() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMSITES_ISSET_ID);
  }

  public void setNumSitesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMSITES_ISSET_ID, value);
  }

  public int getBandwidthSize() {
    return (this.bandwidth == null) ? 0 : this.bandwidth.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.Integer>> getBandwidthIterator() {
    return (this.bandwidth == null) ? null : this.bandwidth.iterator();
  }

  public void addToBandwidth(java.util.List<java.lang.Integer> elem) {
    if (this.bandwidth == null) {
      this.bandwidth = new java.util.ArrayList<java.util.List<java.lang.Integer>>();
    }
    this.bandwidth.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.Integer>> getBandwidth() {
    return this.bandwidth;
  }

  public Request1 setBandwidth(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> bandwidth) {
    this.bandwidth = bandwidth;
    return this;
  }

  public void unsetBandwidth() {
    this.bandwidth = null;
  }

  /** Returns true if field bandwidth is set (has been assigned a value) and false otherwise */
  public boolean isSetBandwidth() {
    return this.bandwidth != null;
  }

  public void setBandwidthIsSet(boolean value) {
    if (!value) {
      this.bandwidth = null;
    }
  }

  public int getFinishTimeSize() {
    return (this.finishTime == null) ? 0 : this.finishTime.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.Integer>> getFinishTimeIterator() {
    return (this.finishTime == null) ? null : this.finishTime.iterator();
  }

  public void addToFinishTime(java.util.List<java.lang.Integer> elem) {
    if (this.finishTime == null) {
      this.finishTime = new java.util.ArrayList<java.util.List<java.lang.Integer>>();
    }
    this.finishTime.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.Integer>> getFinishTime() {
    return this.finishTime;
  }

  public Request1 setFinishTime(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> finishTime) {
    this.finishTime = finishTime;
    return this;
  }

  public void unsetFinishTime() {
    this.finishTime = null;
  }

  /** Returns true if field finishTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishTime() {
    return this.finishTime != null;
  }

  public void setFinishTimeIsSet(boolean value) {
    if (!value) {
      this.finishTime = null;
    }
  }

  public int getOutputSizeSize() {
    return (this.outputSize == null) ? 0 : this.outputSize.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.util.List<java.lang.Long>>> getOutputSizeIterator() {
    return (this.outputSize == null) ? null : this.outputSize.iterator();
  }

  public void addToOutputSize(java.util.List<java.util.List<java.lang.Long>> elem) {
    if (this.outputSize == null) {
      this.outputSize = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Long>>>();
    }
    this.outputSize.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.util.List<java.lang.Long>>> getOutputSize() {
    return this.outputSize;
  }

  public Request1 setOutputSize(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.util.List<java.lang.Long>>> outputSize) {
    this.outputSize = outputSize;
    return this;
  }

  public void unsetOutputSize() {
    this.outputSize = null;
  }

  /** Returns true if field outputSize is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputSize() {
    return this.outputSize != null;
  }

  public void setOutputSizeIsSet(boolean value) {
    if (!value) {
      this.outputSize = null;
    }
  }

  public int getSiteLoadSize() {
    return (this.siteLoad == null) ? 0 : this.siteLoad.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getSiteLoadIterator() {
    return (this.siteLoad == null) ? null : this.siteLoad.iterator();
  }

  public void addToSiteLoad(double elem) {
    if (this.siteLoad == null) {
      this.siteLoad = new java.util.ArrayList<java.lang.Double>();
    }
    this.siteLoad.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getSiteLoad() {
    return this.siteLoad;
  }

  public Request1 setSiteLoad(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> siteLoad) {
    this.siteLoad = siteLoad;
    return this;
  }

  public void unsetSiteLoad() {
    this.siteLoad = null;
  }

  /** Returns true if field siteLoad is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteLoad() {
    return this.siteLoad != null;
  }

  public void setSiteLoadIsSet(boolean value) {
    if (!value) {
      this.siteLoad = null;
    }
  }

  public double getAlpha() {
    return this.alpha;
  }

  public Request1 setAlpha(double alpha) {
    this.alpha = alpha;
    setAlphaIsSet(true);
    return this;
  }

  public void unsetAlpha() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALPHA_ISSET_ID);
  }

  /** Returns true if field alpha is set (has been assigned a value) and false otherwise */
  public boolean isSetAlpha() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALPHA_ISSET_ID);
  }

  public void setAlphaIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALPHA_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NUM_MAPPERS:
      if (value == null) {
        unsetNumMappers();
      } else {
        setNumMappers((java.lang.Integer)value);
      }
      break;

    case NUM_REDUCERS:
      if (value == null) {
        unsetNumReducers();
      } else {
        setNumReducers((java.lang.Integer)value);
      }
      break;

    case NUM_SITES:
      if (value == null) {
        unsetNumSites();
      } else {
        setNumSites((java.lang.Integer)value);
      }
      break;

    case BANDWIDTH:
      if (value == null) {
        unsetBandwidth();
      } else {
        setBandwidth((java.util.List<java.util.List<java.lang.Integer>>)value);
      }
      break;

    case FINISH_TIME:
      if (value == null) {
        unsetFinishTime();
      } else {
        setFinishTime((java.util.List<java.util.List<java.lang.Integer>>)value);
      }
      break;

    case OUTPUT_SIZE:
      if (value == null) {
        unsetOutputSize();
      } else {
        setOutputSize((java.util.List<java.util.List<java.util.List<java.lang.Long>>>)value);
      }
      break;

    case SITE_LOAD:
      if (value == null) {
        unsetSiteLoad();
      } else {
        setSiteLoad((java.util.List<java.lang.Double>)value);
      }
      break;

    case ALPHA:
      if (value == null) {
        unsetAlpha();
      } else {
        setAlpha((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_MAPPERS:
      return getNumMappers();

    case NUM_REDUCERS:
      return getNumReducers();

    case NUM_SITES:
      return getNumSites();

    case BANDWIDTH:
      return getBandwidth();

    case FINISH_TIME:
      return getFinishTime();

    case OUTPUT_SIZE:
      return getOutputSize();

    case SITE_LOAD:
      return getSiteLoad();

    case ALPHA:
      return getAlpha();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NUM_MAPPERS:
      return isSetNumMappers();
    case NUM_REDUCERS:
      return isSetNumReducers();
    case NUM_SITES:
      return isSetNumSites();
    case BANDWIDTH:
      return isSetBandwidth();
    case FINISH_TIME:
      return isSetFinishTime();
    case OUTPUT_SIZE:
      return isSetOutputSize();
    case SITE_LOAD:
      return isSetSiteLoad();
    case ALPHA:
      return isSetAlpha();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Request1)
      return this.equals((Request1)that);
    return false;
  }

  public boolean equals(Request1 that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_numMappers = true;
    boolean that_present_numMappers = true;
    if (this_present_numMappers || that_present_numMappers) {
      if (!(this_present_numMappers && that_present_numMappers))
        return false;
      if (this.numMappers != that.numMappers)
        return false;
    }

    boolean this_present_numReducers = true;
    boolean that_present_numReducers = true;
    if (this_present_numReducers || that_present_numReducers) {
      if (!(this_present_numReducers && that_present_numReducers))
        return false;
      if (this.numReducers != that.numReducers)
        return false;
    }

    boolean this_present_numSites = true;
    boolean that_present_numSites = true;
    if (this_present_numSites || that_present_numSites) {
      if (!(this_present_numSites && that_present_numSites))
        return false;
      if (this.numSites != that.numSites)
        return false;
    }

    boolean this_present_bandwidth = true && this.isSetBandwidth();
    boolean that_present_bandwidth = true && that.isSetBandwidth();
    if (this_present_bandwidth || that_present_bandwidth) {
      if (!(this_present_bandwidth && that_present_bandwidth))
        return false;
      if (!this.bandwidth.equals(that.bandwidth))
        return false;
    }

    boolean this_present_finishTime = true && this.isSetFinishTime();
    boolean that_present_finishTime = true && that.isSetFinishTime();
    if (this_present_finishTime || that_present_finishTime) {
      if (!(this_present_finishTime && that_present_finishTime))
        return false;
      if (!this.finishTime.equals(that.finishTime))
        return false;
    }

    boolean this_present_outputSize = true && this.isSetOutputSize();
    boolean that_present_outputSize = true && that.isSetOutputSize();
    if (this_present_outputSize || that_present_outputSize) {
      if (!(this_present_outputSize && that_present_outputSize))
        return false;
      if (!this.outputSize.equals(that.outputSize))
        return false;
    }

    boolean this_present_siteLoad = true && this.isSetSiteLoad();
    boolean that_present_siteLoad = true && that.isSetSiteLoad();
    if (this_present_siteLoad || that_present_siteLoad) {
      if (!(this_present_siteLoad && that_present_siteLoad))
        return false;
      if (!this.siteLoad.equals(that.siteLoad))
        return false;
    }

    boolean this_present_alpha = true;
    boolean that_present_alpha = true;
    if (this_present_alpha || that_present_alpha) {
      if (!(this_present_alpha && that_present_alpha))
        return false;
      if (this.alpha != that.alpha)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + numMappers;

    hashCode = hashCode * 8191 + numReducers;

    hashCode = hashCode * 8191 + numSites;

    hashCode = hashCode * 8191 + ((isSetBandwidth()) ? 131071 : 524287);
    if (isSetBandwidth())
      hashCode = hashCode * 8191 + bandwidth.hashCode();

    hashCode = hashCode * 8191 + ((isSetFinishTime()) ? 131071 : 524287);
    if (isSetFinishTime())
      hashCode = hashCode * 8191 + finishTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutputSize()) ? 131071 : 524287);
    if (isSetOutputSize())
      hashCode = hashCode * 8191 + outputSize.hashCode();

    hashCode = hashCode * 8191 + ((isSetSiteLoad()) ? 131071 : 524287);
    if (isSetSiteLoad())
      hashCode = hashCode * 8191 + siteLoad.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(alpha);

    return hashCode;
  }

  @Override
  public int compareTo(Request1 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetNumMappers(), other.isSetNumMappers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumMappers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numMappers, other.numMappers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumReducers(), other.isSetNumReducers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumReducers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numReducers, other.numReducers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumSites(), other.isSetNumSites());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumSites()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numSites, other.numSites);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBandwidth(), other.isSetBandwidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBandwidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bandwidth, other.bandwidth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFinishTime(), other.isSetFinishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishTime, other.finishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutputSize(), other.isSetOutputSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputSize, other.outputSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSiteLoad(), other.isSetSiteLoad());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteLoad()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteLoad, other.siteLoad);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAlpha(), other.isSetAlpha());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlpha()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alpha, other.alpha);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Request1(");
    boolean first = true;

    sb.append("numMappers:");
    sb.append(this.numMappers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numReducers:");
    sb.append(this.numReducers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numSites:");
    sb.append(this.numSites);
    first = false;
    if (isSetBandwidth()) {
      if (!first) sb.append(", ");
      sb.append("bandwidth:");
      if (this.bandwidth == null) {
        sb.append("null");
      } else {
        sb.append(this.bandwidth);
      }
      first = false;
    }
    if (isSetFinishTime()) {
      if (!first) sb.append(", ");
      sb.append("finishTime:");
      if (this.finishTime == null) {
        sb.append("null");
      } else {
        sb.append(this.finishTime);
      }
      first = false;
    }
    if (isSetOutputSize()) {
      if (!first) sb.append(", ");
      sb.append("outputSize:");
      if (this.outputSize == null) {
        sb.append("null");
      } else {
        sb.append(this.outputSize);
      }
      first = false;
    }
    if (isSetSiteLoad()) {
      if (!first) sb.append(", ");
      sb.append("siteLoad:");
      if (this.siteLoad == null) {
        sb.append("null");
      } else {
        sb.append(this.siteLoad);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("alpha:");
    sb.append(this.alpha);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'numMappers' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'numReducers' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'numSites' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'alpha' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Request1StandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public Request1StandardScheme getScheme() {
      return new Request1StandardScheme();
    }
  }

  private static class Request1StandardScheme extends org.apache.thrift.scheme.StandardScheme<Request1> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Request1 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_MAPPERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numMappers = iprot.readI32();
              struct.setNumMappersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_REDUCERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numReducers = iprot.readI32();
              struct.setNumReducersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_SITES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numSites = iprot.readI32();
              struct.setNumSitesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BANDWIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.bandwidth = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  {
                    org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                    _elem1 = new java.util.ArrayList<java.lang.Integer>(_list3.size);
                    int _elem4;
                    for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                    {
                      _elem4 = iprot.readI32();
                      _elem1.add(_elem4);
                    }
                    iprot.readListEnd();
                  }
                  struct.bandwidth.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setBandwidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FINISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.finishTime = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list6.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  {
                    org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                    _elem7 = new java.util.ArrayList<java.lang.Integer>(_list9.size);
                    int _elem10;
                    for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                    {
                      _elem10 = iprot.readI32();
                      _elem7.add(_elem10);
                    }
                    iprot.readListEnd();
                  }
                  struct.finishTime.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setFinishTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OUTPUT_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.outputSize = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Long>>>(_list12.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Long>> _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  {
                    org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                    _elem13 = new java.util.ArrayList<java.util.List<java.lang.Long>>(_list15.size);
                    @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> _elem16;
                    for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                    {
                      {
                        org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                        _elem16 = new java.util.ArrayList<java.lang.Long>(_list18.size);
                        long _elem19;
                        for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                        {
                          _elem19 = iprot.readI64();
                          _elem16.add(_elem19);
                        }
                        iprot.readListEnd();
                      }
                      _elem13.add(_elem16);
                    }
                    iprot.readListEnd();
                  }
                  struct.outputSize.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setOutputSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SITE_LOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.siteLoad = new java.util.ArrayList<java.lang.Double>(_list21.size);
                double _elem22;
                for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                {
                  _elem22 = iprot.readDouble();
                  struct.siteLoad.add(_elem22);
                }
                iprot.readListEnd();
              }
              struct.setSiteLoadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ALPHA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.alpha = iprot.readDouble();
              struct.setAlphaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNumMappers()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numMappers' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNumReducers()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numReducers' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNumSites()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numSites' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAlpha()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'alpha' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Request1 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_MAPPERS_FIELD_DESC);
      oprot.writeI32(struct.numMappers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_REDUCERS_FIELD_DESC);
      oprot.writeI32(struct.numReducers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_SITES_FIELD_DESC);
      oprot.writeI32(struct.numSites);
      oprot.writeFieldEnd();
      if (struct.bandwidth != null) {
        if (struct.isSetBandwidth()) {
          oprot.writeFieldBegin(BANDWIDTH_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.bandwidth.size()));
            for (java.util.List<java.lang.Integer> _iter24 : struct.bandwidth)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter24.size()));
                for (int _iter25 : _iter24)
                {
                  oprot.writeI32(_iter25);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.finishTime != null) {
        if (struct.isSetFinishTime()) {
          oprot.writeFieldBegin(FINISH_TIME_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.finishTime.size()));
            for (java.util.List<java.lang.Integer> _iter26 : struct.finishTime)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter26.size()));
                for (int _iter27 : _iter26)
                {
                  oprot.writeI32(_iter27);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.outputSize != null) {
        if (struct.isSetOutputSize()) {
          oprot.writeFieldBegin(OUTPUT_SIZE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.outputSize.size()));
            for (java.util.List<java.util.List<java.lang.Long>> _iter28 : struct.outputSize)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, _iter28.size()));
                for (java.util.List<java.lang.Long> _iter29 : _iter28)
                {
                  {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter29.size()));
                    for (long _iter30 : _iter29)
                    {
                      oprot.writeI64(_iter30);
                    }
                    oprot.writeListEnd();
                  }
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.siteLoad != null) {
        if (struct.isSetSiteLoad()) {
          oprot.writeFieldBegin(SITE_LOAD_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.siteLoad.size()));
            for (double _iter31 : struct.siteLoad)
            {
              oprot.writeDouble(_iter31);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(ALPHA_FIELD_DESC);
      oprot.writeDouble(struct.alpha);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Request1TupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public Request1TupleScheme getScheme() {
      return new Request1TupleScheme();
    }
  }

  private static class Request1TupleScheme extends org.apache.thrift.scheme.TupleScheme<Request1> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Request1 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.numMappers);
      oprot.writeI32(struct.numReducers);
      oprot.writeI32(struct.numSites);
      oprot.writeDouble(struct.alpha);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBandwidth()) {
        optionals.set(0);
      }
      if (struct.isSetFinishTime()) {
        optionals.set(1);
      }
      if (struct.isSetOutputSize()) {
        optionals.set(2);
      }
      if (struct.isSetSiteLoad()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetBandwidth()) {
        {
          oprot.writeI32(struct.bandwidth.size());
          for (java.util.List<java.lang.Integer> _iter32 : struct.bandwidth)
          {
            {
              oprot.writeI32(_iter32.size());
              for (int _iter33 : _iter32)
              {
                oprot.writeI32(_iter33);
              }
            }
          }
        }
      }
      if (struct.isSetFinishTime()) {
        {
          oprot.writeI32(struct.finishTime.size());
          for (java.util.List<java.lang.Integer> _iter34 : struct.finishTime)
          {
            {
              oprot.writeI32(_iter34.size());
              for (int _iter35 : _iter34)
              {
                oprot.writeI32(_iter35);
              }
            }
          }
        }
      }
      if (struct.isSetOutputSize()) {
        {
          oprot.writeI32(struct.outputSize.size());
          for (java.util.List<java.util.List<java.lang.Long>> _iter36 : struct.outputSize)
          {
            {
              oprot.writeI32(_iter36.size());
              for (java.util.List<java.lang.Long> _iter37 : _iter36)
              {
                {
                  oprot.writeI32(_iter37.size());
                  for (long _iter38 : _iter37)
                  {
                    oprot.writeI64(_iter38);
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetSiteLoad()) {
        {
          oprot.writeI32(struct.siteLoad.size());
          for (double _iter39 : struct.siteLoad)
          {
            oprot.writeDouble(_iter39);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Request1 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.numMappers = iprot.readI32();
      struct.setNumMappersIsSet(true);
      struct.numReducers = iprot.readI32();
      struct.setNumReducersIsSet(true);
      struct.numSites = iprot.readI32();
      struct.setNumSitesIsSet(true);
      struct.alpha = iprot.readDouble();
      struct.setAlphaIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list40 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
          struct.bandwidth = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list40.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem41;
          for (int _i42 = 0; _i42 < _list40.size; ++_i42)
          {
            {
              org.apache.thrift.protocol.TList _list43 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
              _elem41 = new java.util.ArrayList<java.lang.Integer>(_list43.size);
              int _elem44;
              for (int _i45 = 0; _i45 < _list43.size; ++_i45)
              {
                _elem44 = iprot.readI32();
                _elem41.add(_elem44);
              }
            }
            struct.bandwidth.add(_elem41);
          }
        }
        struct.setBandwidthIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list46 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
          struct.finishTime = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list46.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem47;
          for (int _i48 = 0; _i48 < _list46.size; ++_i48)
          {
            {
              org.apache.thrift.protocol.TList _list49 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
              _elem47 = new java.util.ArrayList<java.lang.Integer>(_list49.size);
              int _elem50;
              for (int _i51 = 0; _i51 < _list49.size; ++_i51)
              {
                _elem50 = iprot.readI32();
                _elem47.add(_elem50);
              }
            }
            struct.finishTime.add(_elem47);
          }
        }
        struct.setFinishTimeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list52 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
          struct.outputSize = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Long>>>(_list52.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Long>> _elem53;
          for (int _i54 = 0; _i54 < _list52.size; ++_i54)
          {
            {
              org.apache.thrift.protocol.TList _list55 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
              _elem53 = new java.util.ArrayList<java.util.List<java.lang.Long>>(_list55.size);
              @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> _elem56;
              for (int _i57 = 0; _i57 < _list55.size; ++_i57)
              {
                {
                  org.apache.thrift.protocol.TList _list58 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
                  _elem56 = new java.util.ArrayList<java.lang.Long>(_list58.size);
                  long _elem59;
                  for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                  {
                    _elem59 = iprot.readI64();
                    _elem56.add(_elem59);
                  }
                }
                _elem53.add(_elem56);
              }
            }
            struct.outputSize.add(_elem53);
          }
        }
        struct.setOutputSizeIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list61 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
          struct.siteLoad = new java.util.ArrayList<java.lang.Double>(_list61.size);
          double _elem62;
          for (int _i63 = 0; _i63 < _list61.size; ++_i63)
          {
            _elem62 = iprot.readDouble();
            struct.siteLoad.add(_elem62);
          }
        }
        struct.setSiteLoadIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

