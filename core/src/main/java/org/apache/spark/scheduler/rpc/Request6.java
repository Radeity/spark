/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.spark.scheduler.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.2)", date = "2024-01-17")
public class Request6 implements org.apache.thrift.TBase<Request6, Request6._Fields>, java.io.Serializable, Cloneable, Comparable<Request6> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request6");

  private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stageId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField INPUT_LINES_FIELD_DESC = new org.apache.thrift.protocol.TField("inputLines", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request6StandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request6TupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String applicationId; // required
  public int stageId; // required
  public int partitionId; // required
  public int siteId; // required
  public long inputLines; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPLICATION_ID((short)1, "applicationId"),
    STAGE_ID((short)2, "stageId"),
    PARTITION_ID((short)3, "partitionId"),
    SITE_ID((short)4, "siteId"),
    INPUT_LINES((short)5, "inputLines");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPLICATION_ID
          return APPLICATION_ID;
        case 2: // STAGE_ID
          return STAGE_ID;
        case 3: // PARTITION_ID
          return PARTITION_ID;
        case 4: // SITE_ID
          return SITE_ID;
        case 5: // INPUT_LINES
          return INPUT_LINES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STAGEID_ISSET_ID = 0;
  private static final int __PARTITIONID_ISSET_ID = 1;
  private static final int __SITEID_ISSET_ID = 2;
  private static final int __INPUTLINES_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("stageId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partitionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INPUT_LINES, new org.apache.thrift.meta_data.FieldMetaData("inputLines", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request6.class, metaDataMap);
  }

  public Request6() {
  }

  public Request6(
    java.lang.String applicationId,
    int stageId,
    int partitionId,
    int siteId,
    long inputLines)
  {
    this();
    this.applicationId = applicationId;
    this.stageId = stageId;
    setStageIdIsSet(true);
    this.partitionId = partitionId;
    setPartitionIdIsSet(true);
    this.siteId = siteId;
    setSiteIdIsSet(true);
    this.inputLines = inputLines;
    setInputLinesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Request6(Request6 other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetApplicationId()) {
      this.applicationId = other.applicationId;
    }
    this.stageId = other.stageId;
    this.partitionId = other.partitionId;
    this.siteId = other.siteId;
    this.inputLines = other.inputLines;
  }

  public Request6 deepCopy() {
    return new Request6(this);
  }

  @Override
  public void clear() {
    this.applicationId = null;
    setStageIdIsSet(false);
    this.stageId = 0;
    setPartitionIdIsSet(false);
    this.partitionId = 0;
    setSiteIdIsSet(false);
    this.siteId = 0;
    setInputLinesIsSet(false);
    this.inputLines = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getApplicationId() {
    return this.applicationId;
  }

  public Request6 setApplicationId(@org.apache.thrift.annotation.Nullable java.lang.String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  public void unsetApplicationId() {
    this.applicationId = null;
  }

  /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationId() {
    return this.applicationId != null;
  }

  public void setApplicationIdIsSet(boolean value) {
    if (!value) {
      this.applicationId = null;
    }
  }

  public int getStageId() {
    return this.stageId;
  }

  public Request6 setStageId(int stageId) {
    this.stageId = stageId;
    setStageIdIsSet(true);
    return this;
  }

  public void unsetStageId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STAGEID_ISSET_ID);
  }

  /** Returns true if field stageId is set (has been assigned a value) and false otherwise */
  public boolean isSetStageId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STAGEID_ISSET_ID);
  }

  public void setStageIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STAGEID_ISSET_ID, value);
  }

  public int getPartitionId() {
    return this.partitionId;
  }

  public Request6 setPartitionId(int partitionId) {
    this.partitionId = partitionId;
    setPartitionIdIsSet(true);
    return this;
  }

  public void unsetPartitionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITIONID_ISSET_ID);
  }

  /** Returns true if field partitionId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITIONID_ISSET_ID);
  }

  public void setPartitionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITIONID_ISSET_ID, value);
  }

  public int getSiteId() {
    return this.siteId;
  }

  public Request6 setSiteId(int siteId) {
    this.siteId = siteId;
    setSiteIdIsSet(true);
    return this;
  }

  public void unsetSiteId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SITEID_ISSET_ID);
  }

  /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SITEID_ISSET_ID);
  }

  public void setSiteIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SITEID_ISSET_ID, value);
  }

  public long getInputLines() {
    return this.inputLines;
  }

  public Request6 setInputLines(long inputLines) {
    this.inputLines = inputLines;
    setInputLinesIsSet(true);
    return this;
  }

  public void unsetInputLines() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INPUTLINES_ISSET_ID);
  }

  /** Returns true if field inputLines is set (has been assigned a value) and false otherwise */
  public boolean isSetInputLines() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INPUTLINES_ISSET_ID);
  }

  public void setInputLinesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INPUTLINES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case APPLICATION_ID:
      if (value == null) {
        unsetApplicationId();
      } else {
        setApplicationId((java.lang.String)value);
      }
      break;

    case STAGE_ID:
      if (value == null) {
        unsetStageId();
      } else {
        setStageId((java.lang.Integer)value);
      }
      break;

    case PARTITION_ID:
      if (value == null) {
        unsetPartitionId();
      } else {
        setPartitionId((java.lang.Integer)value);
      }
      break;

    case SITE_ID:
      if (value == null) {
        unsetSiteId();
      } else {
        setSiteId((java.lang.Integer)value);
      }
      break;

    case INPUT_LINES:
      if (value == null) {
        unsetInputLines();
      } else {
        setInputLines((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case APPLICATION_ID:
      return getApplicationId();

    case STAGE_ID:
      return getStageId();

    case PARTITION_ID:
      return getPartitionId();

    case SITE_ID:
      return getSiteId();

    case INPUT_LINES:
      return getInputLines();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case APPLICATION_ID:
      return isSetApplicationId();
    case STAGE_ID:
      return isSetStageId();
    case PARTITION_ID:
      return isSetPartitionId();
    case SITE_ID:
      return isSetSiteId();
    case INPUT_LINES:
      return isSetInputLines();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Request6)
      return this.equals((Request6)that);
    return false;
  }

  public boolean equals(Request6 that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_applicationId = true && this.isSetApplicationId();
    boolean that_present_applicationId = true && that.isSetApplicationId();
    if (this_present_applicationId || that_present_applicationId) {
      if (!(this_present_applicationId && that_present_applicationId))
        return false;
      if (!this.applicationId.equals(that.applicationId))
        return false;
    }

    boolean this_present_stageId = true;
    boolean that_present_stageId = true;
    if (this_present_stageId || that_present_stageId) {
      if (!(this_present_stageId && that_present_stageId))
        return false;
      if (this.stageId != that.stageId)
        return false;
    }

    boolean this_present_partitionId = true;
    boolean that_present_partitionId = true;
    if (this_present_partitionId || that_present_partitionId) {
      if (!(this_present_partitionId && that_present_partitionId))
        return false;
      if (this.partitionId != that.partitionId)
        return false;
    }

    boolean this_present_siteId = true;
    boolean that_present_siteId = true;
    if (this_present_siteId || that_present_siteId) {
      if (!(this_present_siteId && that_present_siteId))
        return false;
      if (this.siteId != that.siteId)
        return false;
    }

    boolean this_present_inputLines = true;
    boolean that_present_inputLines = true;
    if (this_present_inputLines || that_present_inputLines) {
      if (!(this_present_inputLines && that_present_inputLines))
        return false;
      if (this.inputLines != that.inputLines)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetApplicationId()) ? 131071 : 524287);
    if (isSetApplicationId())
      hashCode = hashCode * 8191 + applicationId.hashCode();

    hashCode = hashCode * 8191 + stageId;

    hashCode = hashCode * 8191 + partitionId;

    hashCode = hashCode * 8191 + siteId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(inputLines);

    return hashCode;
  }

  @Override
  public int compareTo(Request6 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetApplicationId(), other.isSetApplicationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStageId(), other.isSetStageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stageId, other.stageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartitionId(), other.isSetPartitionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionId, other.partitionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSiteId(), other.isSetSiteId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInputLines(), other.isSetInputLines());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInputLines()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputLines, other.inputLines);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Request6(");
    boolean first = true;

    sb.append("applicationId:");
    if (this.applicationId == null) {
      sb.append("null");
    } else {
      sb.append(this.applicationId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stageId:");
    sb.append(this.stageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partitionId:");
    sb.append(this.partitionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("siteId:");
    sb.append(this.siteId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inputLines:");
    sb.append(this.inputLines);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (applicationId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'stageId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'partitionId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'siteId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'inputLines' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Request6StandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public Request6StandardScheme getScheme() {
      return new Request6StandardScheme();
    }
  }

  private static class Request6StandardScheme extends org.apache.thrift.scheme.StandardScheme<Request6> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Request6 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPLICATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicationId = iprot.readString();
              struct.setApplicationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stageId = iprot.readI32();
              struct.setStageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partitionId = iprot.readI32();
              struct.setPartitionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SITE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.siteId = iprot.readI32();
              struct.setSiteIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INPUT_LINES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.inputLines = iprot.readI64();
              struct.setInputLinesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStageId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'stageId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPartitionId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'partitionId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSiteId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'siteId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInputLines()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'inputLines' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Request6 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.applicationId != null) {
        oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
        oprot.writeString(struct.applicationId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STAGE_ID_FIELD_DESC);
      oprot.writeI32(struct.stageId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
      oprot.writeI32(struct.partitionId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
      oprot.writeI32(struct.siteId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INPUT_LINES_FIELD_DESC);
      oprot.writeI64(struct.inputLines);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Request6TupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public Request6TupleScheme getScheme() {
      return new Request6TupleScheme();
    }
  }

  private static class Request6TupleScheme extends org.apache.thrift.scheme.TupleScheme<Request6> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Request6 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.applicationId);
      oprot.writeI32(struct.stageId);
      oprot.writeI32(struct.partitionId);
      oprot.writeI32(struct.siteId);
      oprot.writeI64(struct.inputLines);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Request6 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.applicationId = iprot.readString();
      struct.setApplicationIdIsSet(true);
      struct.stageId = iprot.readI32();
      struct.setStageIdIsSet(true);
      struct.partitionId = iprot.readI32();
      struct.setPartitionIdIsSet(true);
      struct.siteId = iprot.readI32();
      struct.setSiteIdIsSet(true);
      struct.inputLines = iprot.readI64();
      struct.setInputLinesIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

