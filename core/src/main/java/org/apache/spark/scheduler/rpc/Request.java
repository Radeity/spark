/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.spark.scheduler.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.2)", date = "2023-12-23")
public class Request implements org.apache.thrift.TBase<Request, Request._Fields>, java.io.Serializable, Cloneable, Comparable<Request> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request");

  private static final org.apache.thrift.protocol.TField NUM_MAPPERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numMappers", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_REDUCERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numReducers", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_SITES_FIELD_DESC = new org.apache.thrift.protocol.TField("numSites", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField BANDWIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("bandwidth", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField FINISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("finishTime", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField OUTPUT_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("outputSize", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestTupleSchemeFactory();

  public int numMappers; // required
  public int numReducers; // required
  public int numSites; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> bandwidth; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> finishTime; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.util.List<java.lang.Integer>>> outputSize; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_MAPPERS((short)1, "numMappers"),
    NUM_REDUCERS((short)2, "numReducers"),
    NUM_SITES((short)3, "numSites"),
    BANDWIDTH((short)4, "bandwidth"),
    FINISH_TIME((short)5, "finishTime"),
    OUTPUT_SIZE((short)6, "outputSize");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_MAPPERS
          return NUM_MAPPERS;
        case 2: // NUM_REDUCERS
          return NUM_REDUCERS;
        case 3: // NUM_SITES
          return NUM_SITES;
        case 4: // BANDWIDTH
          return BANDWIDTH;
        case 5: // FINISH_TIME
          return FINISH_TIME;
        case 6: // OUTPUT_SIZE
          return OUTPUT_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMMAPPERS_ISSET_ID = 0;
  private static final int __NUMREDUCERS_ISSET_ID = 1;
  private static final int __NUMSITES_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_MAPPERS, new org.apache.thrift.meta_data.FieldMetaData("numMappers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_REDUCERS, new org.apache.thrift.meta_data.FieldMetaData("numReducers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_SITES, new org.apache.thrift.meta_data.FieldMetaData("numSites", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BANDWIDTH, new org.apache.thrift.meta_data.FieldMetaData("bandwidth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    tmpMap.put(_Fields.FINISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("finishTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    tmpMap.put(_Fields.OUTPUT_SIZE, new org.apache.thrift.meta_data.FieldMetaData("outputSize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request.class, metaDataMap);
  }

  public Request() {
  }

  public Request(
    int numMappers,
    int numReducers,
    int numSites,
    java.util.List<java.util.List<java.lang.Integer>> bandwidth,
    java.util.List<java.util.List<java.lang.Integer>> finishTime,
    java.util.List<java.util.List<java.util.List<java.lang.Integer>>> outputSize)
  {
    this();
    this.numMappers = numMappers;
    setNumMappersIsSet(true);
    this.numReducers = numReducers;
    setNumReducersIsSet(true);
    this.numSites = numSites;
    setNumSitesIsSet(true);
    this.bandwidth = bandwidth;
    this.finishTime = finishTime;
    this.outputSize = outputSize;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Request(Request other) {
    __isset_bitfield = other.__isset_bitfield;
    this.numMappers = other.numMappers;
    this.numReducers = other.numReducers;
    this.numSites = other.numSites;
    if (other.isSetBandwidth()) {
      java.util.List<java.util.List<java.lang.Integer>> __this__bandwidth = new java.util.ArrayList<java.util.List<java.lang.Integer>>(other.bandwidth.size());
      for (java.util.List<java.lang.Integer> other_element : other.bandwidth) {
        java.util.List<java.lang.Integer> __this__bandwidth_copy = new java.util.ArrayList<java.lang.Integer>(other_element);
        __this__bandwidth.add(__this__bandwidth_copy);
      }
      this.bandwidth = __this__bandwidth;
    }
    if (other.isSetFinishTime()) {
      java.util.List<java.util.List<java.lang.Integer>> __this__finishTime = new java.util.ArrayList<java.util.List<java.lang.Integer>>(other.finishTime.size());
      for (java.util.List<java.lang.Integer> other_element : other.finishTime) {
        java.util.List<java.lang.Integer> __this__finishTime_copy = new java.util.ArrayList<java.lang.Integer>(other_element);
        __this__finishTime.add(__this__finishTime_copy);
      }
      this.finishTime = __this__finishTime;
    }
    if (other.isSetOutputSize()) {
      java.util.List<java.util.List<java.util.List<java.lang.Integer>>> __this__outputSize = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Integer>>>(other.outputSize.size());
      for (java.util.List<java.util.List<java.lang.Integer>> other_element : other.outputSize) {
        java.util.List<java.util.List<java.lang.Integer>> __this__outputSize_copy = new java.util.ArrayList<java.util.List<java.lang.Integer>>(other_element.size());
        for (java.util.List<java.lang.Integer> other_element_element : other_element) {
          java.util.List<java.lang.Integer> __this__outputSize_copy_copy = new java.util.ArrayList<java.lang.Integer>(other_element_element);
          __this__outputSize_copy.add(__this__outputSize_copy_copy);
        }
        __this__outputSize.add(__this__outputSize_copy);
      }
      this.outputSize = __this__outputSize;
    }
  }

  public Request deepCopy() {
    return new Request(this);
  }

  @Override
  public void clear() {
    setNumMappersIsSet(false);
    this.numMappers = 0;
    setNumReducersIsSet(false);
    this.numReducers = 0;
    setNumSitesIsSet(false);
    this.numSites = 0;
    this.bandwidth = null;
    this.finishTime = null;
    this.outputSize = null;
  }

  public int getNumMappers() {
    return this.numMappers;
  }

  public Request setNumMappers(int numMappers) {
    this.numMappers = numMappers;
    setNumMappersIsSet(true);
    return this;
  }

  public void unsetNumMappers() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMMAPPERS_ISSET_ID);
  }

  /** Returns true if field numMappers is set (has been assigned a value) and false otherwise */
  public boolean isSetNumMappers() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMMAPPERS_ISSET_ID);
  }

  public void setNumMappersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMMAPPERS_ISSET_ID, value);
  }

  public int getNumReducers() {
    return this.numReducers;
  }

  public Request setNumReducers(int numReducers) {
    this.numReducers = numReducers;
    setNumReducersIsSet(true);
    return this;
  }

  public void unsetNumReducers() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMREDUCERS_ISSET_ID);
  }

  /** Returns true if field numReducers is set (has been assigned a value) and false otherwise */
  public boolean isSetNumReducers() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMREDUCERS_ISSET_ID);
  }

  public void setNumReducersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMREDUCERS_ISSET_ID, value);
  }

  public int getNumSites() {
    return this.numSites;
  }

  public Request setNumSites(int numSites) {
    this.numSites = numSites;
    setNumSitesIsSet(true);
    return this;
  }

  public void unsetNumSites() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMSITES_ISSET_ID);
  }

  /** Returns true if field numSites is set (has been assigned a value) and false otherwise */
  public boolean isSetNumSites() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMSITES_ISSET_ID);
  }

  public void setNumSitesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMSITES_ISSET_ID, value);
  }

  public int getBandwidthSize() {
    return (this.bandwidth == null) ? 0 : this.bandwidth.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.Integer>> getBandwidthIterator() {
    return (this.bandwidth == null) ? null : this.bandwidth.iterator();
  }

  public void addToBandwidth(java.util.List<java.lang.Integer> elem) {
    if (this.bandwidth == null) {
      this.bandwidth = new java.util.ArrayList<java.util.List<java.lang.Integer>>();
    }
    this.bandwidth.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.Integer>> getBandwidth() {
    return this.bandwidth;
  }

  public Request setBandwidth(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> bandwidth) {
    this.bandwidth = bandwidth;
    return this;
  }

  public void unsetBandwidth() {
    this.bandwidth = null;
  }

  /** Returns true if field bandwidth is set (has been assigned a value) and false otherwise */
  public boolean isSetBandwidth() {
    return this.bandwidth != null;
  }

  public void setBandwidthIsSet(boolean value) {
    if (!value) {
      this.bandwidth = null;
    }
  }

  public int getFinishTimeSize() {
    return (this.finishTime == null) ? 0 : this.finishTime.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.Integer>> getFinishTimeIterator() {
    return (this.finishTime == null) ? null : this.finishTime.iterator();
  }

  public void addToFinishTime(java.util.List<java.lang.Integer> elem) {
    if (this.finishTime == null) {
      this.finishTime = new java.util.ArrayList<java.util.List<java.lang.Integer>>();
    }
    this.finishTime.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.Integer>> getFinishTime() {
    return this.finishTime;
  }

  public Request setFinishTime(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> finishTime) {
    this.finishTime = finishTime;
    return this;
  }

  public void unsetFinishTime() {
    this.finishTime = null;
  }

  /** Returns true if field finishTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishTime() {
    return this.finishTime != null;
  }

  public void setFinishTimeIsSet(boolean value) {
    if (!value) {
      this.finishTime = null;
    }
  }

  public int getOutputSizeSize() {
    return (this.outputSize == null) ? 0 : this.outputSize.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.util.List<java.lang.Integer>>> getOutputSizeIterator() {
    return (this.outputSize == null) ? null : this.outputSize.iterator();
  }

  public void addToOutputSize(java.util.List<java.util.List<java.lang.Integer>> elem) {
    if (this.outputSize == null) {
      this.outputSize = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Integer>>>();
    }
    this.outputSize.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.util.List<java.lang.Integer>>> getOutputSize() {
    return this.outputSize;
  }

  public Request setOutputSize(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.util.List<java.lang.Integer>>> outputSize) {
    this.outputSize = outputSize;
    return this;
  }

  public void unsetOutputSize() {
    this.outputSize = null;
  }

  /** Returns true if field outputSize is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputSize() {
    return this.outputSize != null;
  }

  public void setOutputSizeIsSet(boolean value) {
    if (!value) {
      this.outputSize = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NUM_MAPPERS:
      if (value == null) {
        unsetNumMappers();
      } else {
        setNumMappers((java.lang.Integer)value);
      }
      break;

    case NUM_REDUCERS:
      if (value == null) {
        unsetNumReducers();
      } else {
        setNumReducers((java.lang.Integer)value);
      }
      break;

    case NUM_SITES:
      if (value == null) {
        unsetNumSites();
      } else {
        setNumSites((java.lang.Integer)value);
      }
      break;

    case BANDWIDTH:
      if (value == null) {
        unsetBandwidth();
      } else {
        setBandwidth((java.util.List<java.util.List<java.lang.Integer>>)value);
      }
      break;

    case FINISH_TIME:
      if (value == null) {
        unsetFinishTime();
      } else {
        setFinishTime((java.util.List<java.util.List<java.lang.Integer>>)value);
      }
      break;

    case OUTPUT_SIZE:
      if (value == null) {
        unsetOutputSize();
      } else {
        setOutputSize((java.util.List<java.util.List<java.util.List<java.lang.Integer>>>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_MAPPERS:
      return getNumMappers();

    case NUM_REDUCERS:
      return getNumReducers();

    case NUM_SITES:
      return getNumSites();

    case BANDWIDTH:
      return getBandwidth();

    case FINISH_TIME:
      return getFinishTime();

    case OUTPUT_SIZE:
      return getOutputSize();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NUM_MAPPERS:
      return isSetNumMappers();
    case NUM_REDUCERS:
      return isSetNumReducers();
    case NUM_SITES:
      return isSetNumSites();
    case BANDWIDTH:
      return isSetBandwidth();
    case FINISH_TIME:
      return isSetFinishTime();
    case OUTPUT_SIZE:
      return isSetOutputSize();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Request)
      return this.equals((Request)that);
    return false;
  }

  public boolean equals(Request that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_numMappers = true;
    boolean that_present_numMappers = true;
    if (this_present_numMappers || that_present_numMappers) {
      if (!(this_present_numMappers && that_present_numMappers))
        return false;
      if (this.numMappers != that.numMappers)
        return false;
    }

    boolean this_present_numReducers = true;
    boolean that_present_numReducers = true;
    if (this_present_numReducers || that_present_numReducers) {
      if (!(this_present_numReducers && that_present_numReducers))
        return false;
      if (this.numReducers != that.numReducers)
        return false;
    }

    boolean this_present_numSites = true;
    boolean that_present_numSites = true;
    if (this_present_numSites || that_present_numSites) {
      if (!(this_present_numSites && that_present_numSites))
        return false;
      if (this.numSites != that.numSites)
        return false;
    }

    boolean this_present_bandwidth = true && this.isSetBandwidth();
    boolean that_present_bandwidth = true && that.isSetBandwidth();
    if (this_present_bandwidth || that_present_bandwidth) {
      if (!(this_present_bandwidth && that_present_bandwidth))
        return false;
      if (!this.bandwidth.equals(that.bandwidth))
        return false;
    }

    boolean this_present_finishTime = true && this.isSetFinishTime();
    boolean that_present_finishTime = true && that.isSetFinishTime();
    if (this_present_finishTime || that_present_finishTime) {
      if (!(this_present_finishTime && that_present_finishTime))
        return false;
      if (!this.finishTime.equals(that.finishTime))
        return false;
    }

    boolean this_present_outputSize = true && this.isSetOutputSize();
    boolean that_present_outputSize = true && that.isSetOutputSize();
    if (this_present_outputSize || that_present_outputSize) {
      if (!(this_present_outputSize && that_present_outputSize))
        return false;
      if (!this.outputSize.equals(that.outputSize))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + numMappers;

    hashCode = hashCode * 8191 + numReducers;

    hashCode = hashCode * 8191 + numSites;

    hashCode = hashCode * 8191 + ((isSetBandwidth()) ? 131071 : 524287);
    if (isSetBandwidth())
      hashCode = hashCode * 8191 + bandwidth.hashCode();

    hashCode = hashCode * 8191 + ((isSetFinishTime()) ? 131071 : 524287);
    if (isSetFinishTime())
      hashCode = hashCode * 8191 + finishTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutputSize()) ? 131071 : 524287);
    if (isSetOutputSize())
      hashCode = hashCode * 8191 + outputSize.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Request other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetNumMappers(), other.isSetNumMappers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumMappers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numMappers, other.numMappers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumReducers(), other.isSetNumReducers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumReducers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numReducers, other.numReducers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumSites(), other.isSetNumSites());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumSites()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numSites, other.numSites);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBandwidth(), other.isSetBandwidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBandwidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bandwidth, other.bandwidth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFinishTime(), other.isSetFinishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishTime, other.finishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutputSize(), other.isSetOutputSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputSize, other.outputSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Request(");
    boolean first = true;

    sb.append("numMappers:");
    sb.append(this.numMappers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numReducers:");
    sb.append(this.numReducers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numSites:");
    sb.append(this.numSites);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bandwidth:");
    if (this.bandwidth == null) {
      sb.append("null");
    } else {
      sb.append(this.bandwidth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishTime:");
    if (this.finishTime == null) {
      sb.append("null");
    } else {
      sb.append(this.finishTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outputSize:");
    if (this.outputSize == null) {
      sb.append("null");
    } else {
      sb.append(this.outputSize);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'numMappers' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'numReducers' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'numSites' because it's a primitive and you chose the non-beans generator.
    if (bandwidth == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bandwidth' was not present! Struct: " + toString());
    }
    if (finishTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'finishTime' was not present! Struct: " + toString());
    }
    if (outputSize == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'outputSize' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RequestStandardScheme getScheme() {
      return new RequestStandardScheme();
    }
  }

  private static class RequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_MAPPERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numMappers = iprot.readI32();
              struct.setNumMappersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_REDUCERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numReducers = iprot.readI32();
              struct.setNumReducersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_SITES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numSites = iprot.readI32();
              struct.setNumSitesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BANDWIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.bandwidth = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  {
                    org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                    _elem1 = new java.util.ArrayList<java.lang.Integer>(_list3.size);
                    int _elem4;
                    for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                    {
                      _elem4 = iprot.readI32();
                      _elem1.add(_elem4);
                    }
                    iprot.readListEnd();
                  }
                  struct.bandwidth.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setBandwidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FINISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.finishTime = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list6.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  {
                    org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                    _elem7 = new java.util.ArrayList<java.lang.Integer>(_list9.size);
                    int _elem10;
                    for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                    {
                      _elem10 = iprot.readI32();
                      _elem7.add(_elem10);
                    }
                    iprot.readListEnd();
                  }
                  struct.finishTime.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setFinishTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OUTPUT_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.outputSize = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Integer>>>(_list12.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  {
                    org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                    _elem13 = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list15.size);
                    @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem16;
                    for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                    {
                      {
                        org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                        _elem16 = new java.util.ArrayList<java.lang.Integer>(_list18.size);
                        int _elem19;
                        for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                        {
                          _elem19 = iprot.readI32();
                          _elem16.add(_elem19);
                        }
                        iprot.readListEnd();
                      }
                      _elem13.add(_elem16);
                    }
                    iprot.readListEnd();
                  }
                  struct.outputSize.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setOutputSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNumMappers()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numMappers' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNumReducers()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numReducers' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNumSites()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numSites' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Request struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_MAPPERS_FIELD_DESC);
      oprot.writeI32(struct.numMappers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_REDUCERS_FIELD_DESC);
      oprot.writeI32(struct.numReducers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_SITES_FIELD_DESC);
      oprot.writeI32(struct.numSites);
      oprot.writeFieldEnd();
      if (struct.bandwidth != null) {
        oprot.writeFieldBegin(BANDWIDTH_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.bandwidth.size()));
          for (java.util.List<java.lang.Integer> _iter21 : struct.bandwidth)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter21.size()));
              for (int _iter22 : _iter21)
              {
                oprot.writeI32(_iter22);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.finishTime != null) {
        oprot.writeFieldBegin(FINISH_TIME_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.finishTime.size()));
          for (java.util.List<java.lang.Integer> _iter23 : struct.finishTime)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter23.size()));
              for (int _iter24 : _iter23)
              {
                oprot.writeI32(_iter24);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.outputSize != null) {
        oprot.writeFieldBegin(OUTPUT_SIZE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.outputSize.size()));
          for (java.util.List<java.util.List<java.lang.Integer>> _iter25 : struct.outputSize)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, _iter25.size()));
              for (java.util.List<java.lang.Integer> _iter26 : _iter25)
              {
                {
                  oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter26.size()));
                  for (int _iter27 : _iter26)
                  {
                    oprot.writeI32(_iter27);
                  }
                  oprot.writeListEnd();
                }
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RequestTupleScheme getScheme() {
      return new RequestTupleScheme();
    }
  }

  private static class RequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.numMappers);
      oprot.writeI32(struct.numReducers);
      oprot.writeI32(struct.numSites);
      {
        oprot.writeI32(struct.bandwidth.size());
        for (java.util.List<java.lang.Integer> _iter28 : struct.bandwidth)
        {
          {
            oprot.writeI32(_iter28.size());
            for (int _iter29 : _iter28)
            {
              oprot.writeI32(_iter29);
            }
          }
        }
      }
      {
        oprot.writeI32(struct.finishTime.size());
        for (java.util.List<java.lang.Integer> _iter30 : struct.finishTime)
        {
          {
            oprot.writeI32(_iter30.size());
            for (int _iter31 : _iter30)
            {
              oprot.writeI32(_iter31);
            }
          }
        }
      }
      {
        oprot.writeI32(struct.outputSize.size());
        for (java.util.List<java.util.List<java.lang.Integer>> _iter32 : struct.outputSize)
        {
          {
            oprot.writeI32(_iter32.size());
            for (java.util.List<java.lang.Integer> _iter33 : _iter32)
            {
              {
                oprot.writeI32(_iter33.size());
                for (int _iter34 : _iter33)
                {
                  oprot.writeI32(_iter34);
                }
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.numMappers = iprot.readI32();
      struct.setNumMappersIsSet(true);
      struct.numReducers = iprot.readI32();
      struct.setNumReducersIsSet(true);
      struct.numSites = iprot.readI32();
      struct.setNumSitesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list35 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
        struct.bandwidth = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list35.size);
        @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem36;
        for (int _i37 = 0; _i37 < _list35.size; ++_i37)
        {
          {
            org.apache.thrift.protocol.TList _list38 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
            _elem36 = new java.util.ArrayList<java.lang.Integer>(_list38.size);
            int _elem39;
            for (int _i40 = 0; _i40 < _list38.size; ++_i40)
            {
              _elem39 = iprot.readI32();
              _elem36.add(_elem39);
            }
          }
          struct.bandwidth.add(_elem36);
        }
      }
      struct.setBandwidthIsSet(true);
      {
        org.apache.thrift.protocol.TList _list41 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
        struct.finishTime = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list41.size);
        @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem42;
        for (int _i43 = 0; _i43 < _list41.size; ++_i43)
        {
          {
            org.apache.thrift.protocol.TList _list44 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
            _elem42 = new java.util.ArrayList<java.lang.Integer>(_list44.size);
            int _elem45;
            for (int _i46 = 0; _i46 < _list44.size; ++_i46)
            {
              _elem45 = iprot.readI32();
              _elem42.add(_elem45);
            }
          }
          struct.finishTime.add(_elem42);
        }
      }
      struct.setFinishTimeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list47 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
        struct.outputSize = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Integer>>>(_list47.size);
        @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> _elem48;
        for (int _i49 = 0; _i49 < _list47.size; ++_i49)
        {
          {
            org.apache.thrift.protocol.TList _list50 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
            _elem48 = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list50.size);
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem51;
            for (int _i52 = 0; _i52 < _list50.size; ++_i52)
            {
              {
                org.apache.thrift.protocol.TList _list53 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
                _elem51 = new java.util.ArrayList<java.lang.Integer>(_list53.size);
                int _elem54;
                for (int _i55 = 0; _i55 < _list53.size; ++_i55)
                {
                  _elem54 = iprot.readI32();
                  _elem51.add(_elem54);
                }
              }
              _elem48.add(_elem51);
            }
          }
          struct.outputSize.add(_elem48);
        }
      }
      struct.setOutputSizeIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

