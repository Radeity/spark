/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.spark.scheduler.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.2)", date = "2024-01-26")
public class Request2 implements org.apache.thrift.TBase<Request2, Request2._Fields>, java.io.Serializable, Cloneable, Comparable<Request2> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request2");

  private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stageId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_MAPPERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numMappers", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NUM_REDUCERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numReducers", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SHUFFLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shuffleId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField INPUT_LINES_FIELD_DESC = new org.apache.thrift.protocol.TField("inputLines", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField OUTPUT_SIZES_FIELD_DESC = new org.apache.thrift.protocol.TField("outputSizes", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request2StandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request2TupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String applicationId; // required
  public int stageId; // required
  public int partitionId; // required
  public int numMappers; // required
  public int numReducers; // required
  public int shuffleId; // required
  public long inputLines; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> outputSizes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPLICATION_ID((short)1, "applicationId"),
    STAGE_ID((short)2, "stageId"),
    PARTITION_ID((short)3, "partitionId"),
    NUM_MAPPERS((short)4, "numMappers"),
    NUM_REDUCERS((short)5, "numReducers"),
    SHUFFLE_ID((short)6, "shuffleId"),
    INPUT_LINES((short)7, "inputLines"),
    OUTPUT_SIZES((short)8, "outputSizes");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPLICATION_ID
          return APPLICATION_ID;
        case 2: // STAGE_ID
          return STAGE_ID;
        case 3: // PARTITION_ID
          return PARTITION_ID;
        case 4: // NUM_MAPPERS
          return NUM_MAPPERS;
        case 5: // NUM_REDUCERS
          return NUM_REDUCERS;
        case 6: // SHUFFLE_ID
          return SHUFFLE_ID;
        case 7: // INPUT_LINES
          return INPUT_LINES;
        case 8: // OUTPUT_SIZES
          return OUTPUT_SIZES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STAGEID_ISSET_ID = 0;
  private static final int __PARTITIONID_ISSET_ID = 1;
  private static final int __NUMMAPPERS_ISSET_ID = 2;
  private static final int __NUMREDUCERS_ISSET_ID = 3;
  private static final int __SHUFFLEID_ISSET_ID = 4;
  private static final int __INPUTLINES_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("stageId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partitionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_MAPPERS, new org.apache.thrift.meta_data.FieldMetaData("numMappers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_REDUCERS, new org.apache.thrift.meta_data.FieldMetaData("numReducers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHUFFLE_ID, new org.apache.thrift.meta_data.FieldMetaData("shuffleId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INPUT_LINES, new org.apache.thrift.meta_data.FieldMetaData("inputLines", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OUTPUT_SIZES, new org.apache.thrift.meta_data.FieldMetaData("outputSizes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request2.class, metaDataMap);
  }

  public Request2() {
  }

  public Request2(
    java.lang.String applicationId,
    int stageId,
    int partitionId,
    int numMappers,
    int numReducers,
    int shuffleId,
    long inputLines,
    java.util.List<java.lang.Long> outputSizes)
  {
    this();
    this.applicationId = applicationId;
    this.stageId = stageId;
    setStageIdIsSet(true);
    this.partitionId = partitionId;
    setPartitionIdIsSet(true);
    this.numMappers = numMappers;
    setNumMappersIsSet(true);
    this.numReducers = numReducers;
    setNumReducersIsSet(true);
    this.shuffleId = shuffleId;
    setShuffleIdIsSet(true);
    this.inputLines = inputLines;
    setInputLinesIsSet(true);
    this.outputSizes = outputSizes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Request2(Request2 other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetApplicationId()) {
      this.applicationId = other.applicationId;
    }
    this.stageId = other.stageId;
    this.partitionId = other.partitionId;
    this.numMappers = other.numMappers;
    this.numReducers = other.numReducers;
    this.shuffleId = other.shuffleId;
    this.inputLines = other.inputLines;
    if (other.isSetOutputSizes()) {
      java.util.List<java.lang.Long> __this__outputSizes = new java.util.ArrayList<java.lang.Long>(other.outputSizes);
      this.outputSizes = __this__outputSizes;
    }
  }

  public Request2 deepCopy() {
    return new Request2(this);
  }

  @Override
  public void clear() {
    this.applicationId = null;
    setStageIdIsSet(false);
    this.stageId = 0;
    setPartitionIdIsSet(false);
    this.partitionId = 0;
    setNumMappersIsSet(false);
    this.numMappers = 0;
    setNumReducersIsSet(false);
    this.numReducers = 0;
    setShuffleIdIsSet(false);
    this.shuffleId = 0;
    setInputLinesIsSet(false);
    this.inputLines = 0;
    this.outputSizes = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getApplicationId() {
    return this.applicationId;
  }

  public Request2 setApplicationId(@org.apache.thrift.annotation.Nullable java.lang.String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  public void unsetApplicationId() {
    this.applicationId = null;
  }

  /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationId() {
    return this.applicationId != null;
  }

  public void setApplicationIdIsSet(boolean value) {
    if (!value) {
      this.applicationId = null;
    }
  }

  public int getStageId() {
    return this.stageId;
  }

  public Request2 setStageId(int stageId) {
    this.stageId = stageId;
    setStageIdIsSet(true);
    return this;
  }

  public void unsetStageId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STAGEID_ISSET_ID);
  }

  /** Returns true if field stageId is set (has been assigned a value) and false otherwise */
  public boolean isSetStageId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STAGEID_ISSET_ID);
  }

  public void setStageIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STAGEID_ISSET_ID, value);
  }

  public int getPartitionId() {
    return this.partitionId;
  }

  public Request2 setPartitionId(int partitionId) {
    this.partitionId = partitionId;
    setPartitionIdIsSet(true);
    return this;
  }

  public void unsetPartitionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITIONID_ISSET_ID);
  }

  /** Returns true if field partitionId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITIONID_ISSET_ID);
  }

  public void setPartitionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITIONID_ISSET_ID, value);
  }

  public int getNumMappers() {
    return this.numMappers;
  }

  public Request2 setNumMappers(int numMappers) {
    this.numMappers = numMappers;
    setNumMappersIsSet(true);
    return this;
  }

  public void unsetNumMappers() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMMAPPERS_ISSET_ID);
  }

  /** Returns true if field numMappers is set (has been assigned a value) and false otherwise */
  public boolean isSetNumMappers() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMMAPPERS_ISSET_ID);
  }

  public void setNumMappersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMMAPPERS_ISSET_ID, value);
  }

  public int getNumReducers() {
    return this.numReducers;
  }

  public Request2 setNumReducers(int numReducers) {
    this.numReducers = numReducers;
    setNumReducersIsSet(true);
    return this;
  }

  public void unsetNumReducers() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMREDUCERS_ISSET_ID);
  }

  /** Returns true if field numReducers is set (has been assigned a value) and false otherwise */
  public boolean isSetNumReducers() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMREDUCERS_ISSET_ID);
  }

  public void setNumReducersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMREDUCERS_ISSET_ID, value);
  }

  public int getShuffleId() {
    return this.shuffleId;
  }

  public Request2 setShuffleId(int shuffleId) {
    this.shuffleId = shuffleId;
    setShuffleIdIsSet(true);
    return this;
  }

  public void unsetShuffleId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHUFFLEID_ISSET_ID);
  }

  /** Returns true if field shuffleId is set (has been assigned a value) and false otherwise */
  public boolean isSetShuffleId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHUFFLEID_ISSET_ID);
  }

  public void setShuffleIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHUFFLEID_ISSET_ID, value);
  }

  public long getInputLines() {
    return this.inputLines;
  }

  public Request2 setInputLines(long inputLines) {
    this.inputLines = inputLines;
    setInputLinesIsSet(true);
    return this;
  }

  public void unsetInputLines() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INPUTLINES_ISSET_ID);
  }

  /** Returns true if field inputLines is set (has been assigned a value) and false otherwise */
  public boolean isSetInputLines() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INPUTLINES_ISSET_ID);
  }

  public void setInputLinesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INPUTLINES_ISSET_ID, value);
  }

  public int getOutputSizesSize() {
    return (this.outputSizes == null) ? 0 : this.outputSizes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getOutputSizesIterator() {
    return (this.outputSizes == null) ? null : this.outputSizes.iterator();
  }

  public void addToOutputSizes(long elem) {
    if (this.outputSizes == null) {
      this.outputSizes = new java.util.ArrayList<java.lang.Long>();
    }
    this.outputSizes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getOutputSizes() {
    return this.outputSizes;
  }

  public Request2 setOutputSizes(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> outputSizes) {
    this.outputSizes = outputSizes;
    return this;
  }

  public void unsetOutputSizes() {
    this.outputSizes = null;
  }

  /** Returns true if field outputSizes is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputSizes() {
    return this.outputSizes != null;
  }

  public void setOutputSizesIsSet(boolean value) {
    if (!value) {
      this.outputSizes = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case APPLICATION_ID:
      if (value == null) {
        unsetApplicationId();
      } else {
        setApplicationId((java.lang.String)value);
      }
      break;

    case STAGE_ID:
      if (value == null) {
        unsetStageId();
      } else {
        setStageId((java.lang.Integer)value);
      }
      break;

    case PARTITION_ID:
      if (value == null) {
        unsetPartitionId();
      } else {
        setPartitionId((java.lang.Integer)value);
      }
      break;

    case NUM_MAPPERS:
      if (value == null) {
        unsetNumMappers();
      } else {
        setNumMappers((java.lang.Integer)value);
      }
      break;

    case NUM_REDUCERS:
      if (value == null) {
        unsetNumReducers();
      } else {
        setNumReducers((java.lang.Integer)value);
      }
      break;

    case SHUFFLE_ID:
      if (value == null) {
        unsetShuffleId();
      } else {
        setShuffleId((java.lang.Integer)value);
      }
      break;

    case INPUT_LINES:
      if (value == null) {
        unsetInputLines();
      } else {
        setInputLines((java.lang.Long)value);
      }
      break;

    case OUTPUT_SIZES:
      if (value == null) {
        unsetOutputSizes();
      } else {
        setOutputSizes((java.util.List<java.lang.Long>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case APPLICATION_ID:
      return getApplicationId();

    case STAGE_ID:
      return getStageId();

    case PARTITION_ID:
      return getPartitionId();

    case NUM_MAPPERS:
      return getNumMappers();

    case NUM_REDUCERS:
      return getNumReducers();

    case SHUFFLE_ID:
      return getShuffleId();

    case INPUT_LINES:
      return getInputLines();

    case OUTPUT_SIZES:
      return getOutputSizes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case APPLICATION_ID:
      return isSetApplicationId();
    case STAGE_ID:
      return isSetStageId();
    case PARTITION_ID:
      return isSetPartitionId();
    case NUM_MAPPERS:
      return isSetNumMappers();
    case NUM_REDUCERS:
      return isSetNumReducers();
    case SHUFFLE_ID:
      return isSetShuffleId();
    case INPUT_LINES:
      return isSetInputLines();
    case OUTPUT_SIZES:
      return isSetOutputSizes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Request2)
      return this.equals((Request2)that);
    return false;
  }

  public boolean equals(Request2 that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_applicationId = true && this.isSetApplicationId();
    boolean that_present_applicationId = true && that.isSetApplicationId();
    if (this_present_applicationId || that_present_applicationId) {
      if (!(this_present_applicationId && that_present_applicationId))
        return false;
      if (!this.applicationId.equals(that.applicationId))
        return false;
    }

    boolean this_present_stageId = true;
    boolean that_present_stageId = true;
    if (this_present_stageId || that_present_stageId) {
      if (!(this_present_stageId && that_present_stageId))
        return false;
      if (this.stageId != that.stageId)
        return false;
    }

    boolean this_present_partitionId = true;
    boolean that_present_partitionId = true;
    if (this_present_partitionId || that_present_partitionId) {
      if (!(this_present_partitionId && that_present_partitionId))
        return false;
      if (this.partitionId != that.partitionId)
        return false;
    }

    boolean this_present_numMappers = true;
    boolean that_present_numMappers = true;
    if (this_present_numMappers || that_present_numMappers) {
      if (!(this_present_numMappers && that_present_numMappers))
        return false;
      if (this.numMappers != that.numMappers)
        return false;
    }

    boolean this_present_numReducers = true;
    boolean that_present_numReducers = true;
    if (this_present_numReducers || that_present_numReducers) {
      if (!(this_present_numReducers && that_present_numReducers))
        return false;
      if (this.numReducers != that.numReducers)
        return false;
    }

    boolean this_present_shuffleId = true;
    boolean that_present_shuffleId = true;
    if (this_present_shuffleId || that_present_shuffleId) {
      if (!(this_present_shuffleId && that_present_shuffleId))
        return false;
      if (this.shuffleId != that.shuffleId)
        return false;
    }

    boolean this_present_inputLines = true;
    boolean that_present_inputLines = true;
    if (this_present_inputLines || that_present_inputLines) {
      if (!(this_present_inputLines && that_present_inputLines))
        return false;
      if (this.inputLines != that.inputLines)
        return false;
    }

    boolean this_present_outputSizes = true && this.isSetOutputSizes();
    boolean that_present_outputSizes = true && that.isSetOutputSizes();
    if (this_present_outputSizes || that_present_outputSizes) {
      if (!(this_present_outputSizes && that_present_outputSizes))
        return false;
      if (!this.outputSizes.equals(that.outputSizes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetApplicationId()) ? 131071 : 524287);
    if (isSetApplicationId())
      hashCode = hashCode * 8191 + applicationId.hashCode();

    hashCode = hashCode * 8191 + stageId;

    hashCode = hashCode * 8191 + partitionId;

    hashCode = hashCode * 8191 + numMappers;

    hashCode = hashCode * 8191 + numReducers;

    hashCode = hashCode * 8191 + shuffleId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(inputLines);

    hashCode = hashCode * 8191 + ((isSetOutputSizes()) ? 131071 : 524287);
    if (isSetOutputSizes())
      hashCode = hashCode * 8191 + outputSizes.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Request2 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetApplicationId(), other.isSetApplicationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStageId(), other.isSetStageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stageId, other.stageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartitionId(), other.isSetPartitionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionId, other.partitionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumMappers(), other.isSetNumMappers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumMappers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numMappers, other.numMappers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumReducers(), other.isSetNumReducers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumReducers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numReducers, other.numReducers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetShuffleId(), other.isSetShuffleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShuffleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shuffleId, other.shuffleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInputLines(), other.isSetInputLines());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInputLines()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputLines, other.inputLines);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutputSizes(), other.isSetOutputSizes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputSizes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputSizes, other.outputSizes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Request2(");
    boolean first = true;

    sb.append("applicationId:");
    if (this.applicationId == null) {
      sb.append("null");
    } else {
      sb.append(this.applicationId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stageId:");
    sb.append(this.stageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partitionId:");
    sb.append(this.partitionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numMappers:");
    sb.append(this.numMappers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numReducers:");
    sb.append(this.numReducers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shuffleId:");
    sb.append(this.shuffleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inputLines:");
    sb.append(this.inputLines);
    first = false;
    if (!first) sb.append(", ");
    sb.append("outputSizes:");
    if (this.outputSizes == null) {
      sb.append("null");
    } else {
      sb.append(this.outputSizes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (applicationId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'stageId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'partitionId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'numMappers' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'numReducers' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'shuffleId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'inputLines' because it's a primitive and you chose the non-beans generator.
    if (outputSizes == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'outputSizes' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Request2StandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public Request2StandardScheme getScheme() {
      return new Request2StandardScheme();
    }
  }

  private static class Request2StandardScheme extends org.apache.thrift.scheme.StandardScheme<Request2> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Request2 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPLICATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicationId = iprot.readString();
              struct.setApplicationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stageId = iprot.readI32();
              struct.setStageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partitionId = iprot.readI32();
              struct.setPartitionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM_MAPPERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numMappers = iprot.readI32();
              struct.setNumMappersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUM_REDUCERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numReducers = iprot.readI32();
              struct.setNumReducersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SHUFFLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shuffleId = iprot.readI32();
              struct.setShuffleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INPUT_LINES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.inputLines = iprot.readI64();
              struct.setInputLinesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OUTPUT_SIZES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                struct.outputSizes = new java.util.ArrayList<java.lang.Long>(_list96.size);
                long _elem97;
                for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                {
                  _elem97 = iprot.readI64();
                  struct.outputSizes.add(_elem97);
                }
                iprot.readListEnd();
              }
              struct.setOutputSizesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStageId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'stageId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPartitionId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'partitionId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNumMappers()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numMappers' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNumReducers()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numReducers' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetShuffleId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'shuffleId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInputLines()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'inputLines' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Request2 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.applicationId != null) {
        oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
        oprot.writeString(struct.applicationId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STAGE_ID_FIELD_DESC);
      oprot.writeI32(struct.stageId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
      oprot.writeI32(struct.partitionId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_MAPPERS_FIELD_DESC);
      oprot.writeI32(struct.numMappers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_REDUCERS_FIELD_DESC);
      oprot.writeI32(struct.numReducers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHUFFLE_ID_FIELD_DESC);
      oprot.writeI32(struct.shuffleId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INPUT_LINES_FIELD_DESC);
      oprot.writeI64(struct.inputLines);
      oprot.writeFieldEnd();
      if (struct.outputSizes != null) {
        oprot.writeFieldBegin(OUTPUT_SIZES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.outputSizes.size()));
          for (long _iter99 : struct.outputSizes)
          {
            oprot.writeI64(_iter99);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Request2TupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public Request2TupleScheme getScheme() {
      return new Request2TupleScheme();
    }
  }

  private static class Request2TupleScheme extends org.apache.thrift.scheme.TupleScheme<Request2> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Request2 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.applicationId);
      oprot.writeI32(struct.stageId);
      oprot.writeI32(struct.partitionId);
      oprot.writeI32(struct.numMappers);
      oprot.writeI32(struct.numReducers);
      oprot.writeI32(struct.shuffleId);
      oprot.writeI64(struct.inputLines);
      {
        oprot.writeI32(struct.outputSizes.size());
        for (long _iter100 : struct.outputSizes)
        {
          oprot.writeI64(_iter100);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Request2 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.applicationId = iprot.readString();
      struct.setApplicationIdIsSet(true);
      struct.stageId = iprot.readI32();
      struct.setStageIdIsSet(true);
      struct.partitionId = iprot.readI32();
      struct.setPartitionIdIsSet(true);
      struct.numMappers = iprot.readI32();
      struct.setNumMappersIsSet(true);
      struct.numReducers = iprot.readI32();
      struct.setNumReducersIsSet(true);
      struct.shuffleId = iprot.readI32();
      struct.setShuffleIdIsSet(true);
      struct.inputLines = iprot.readI64();
      struct.setInputLinesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list101 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
        struct.outputSizes = new java.util.ArrayList<java.lang.Long>(_list101.size);
        long _elem102;
        for (int _i103 = 0; _i103 < _list101.size; ++_i103)
        {
          _elem102 = iprot.readI64();
          struct.outputSizes.add(_elem102);
        }
      }
      struct.setOutputSizesIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

